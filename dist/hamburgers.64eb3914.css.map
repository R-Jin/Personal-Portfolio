{"version":3,"sources":["app\\scss\\3 - libraries\\hamburger\\hamburgers.scss","app\\scss\\3 - libraries\\hamburger\\_base.scss","app\\scss\\3 - libraries\\hamburger\\types\\_minus.scss"],"names":[],"mappings":"AACA;;;;;;GCCA,WACI,SDQqB,CCNrB,cAAe,CAEf,kDAAoC,CACpC,0CAA0B,CAC1B,kCAAkC,CAGlC,iDAAa,CACb,gCAAc,CACd,wBAAoB,CACpB,yCAA6B,CACrB,iCAAC,CACT,YAAS,CACT,aAAU,CAyBb,mBAAA,8BAzCD,QAAU,CAsBE,QDNc,CCQrB,iBAxBL,4CAAA,yIA6CI,qDAKJ,WAAA,CACI,oBAAc,CACd,mCAFJ,aAAgB,CAQR,OD/CgB,CCgDhB,gFAIA,YAAA,CACA,UAAA,CACA,wBAAA,CACH,iBAAA,mBAhBL,6CAAgB,CAoBR,qCAAW,CACX,6BAAc,CACjB,+CAAA,kCAtBL,wBAwBc,CACN,uCAA8D,CACjE,+EAIA,UAAA,cCjFH,yBAGA,gCAAA,+FAqBO,iFAAA,0EArBP","file":"hamburgers.64eb3914.css","sourceRoot":"..","sourcesContent":["@charset \"UTF-8\";\n/*!\n * Hamburgers\n * @description Tasty CSS-animated hamburgers\n * @author Jonathan Suh @jonsuh\n * @site https://jonsuh.com/hamburgers\n * @link https://github.com/jonsuh/hamburgers\n */\n\n// Settings\n// ==================================================\n$hamburger-padding-x: 0px !default;\n$hamburger-padding-y: 0px !default;\n$hamburger-layer-width: 1.5rem !default;\n$hamburger-layer-height: 2px !default;\n$hamburger-layer-spacing: 4px !default;\n$hamburger-layer-color: #f8f8f2 !default;\n$hamburger-layer-border-radius: 4px !default;\n$hamburger-hover-opacity: 1 !default;\n$hamburger-active-layer-color: $hamburger-layer-color !default;\n$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;\n\n// To use CSS filters as the hover effect instead of opacity,\n// set $hamburger-hover-use-filter as true and\n// change the value of $hamburger-hover-filter accordingly.\n$hamburger-hover-use-filter: false !default;\n$hamburger-hover-filter: opacity(50%) !default;\n$hamburger-active-hover-filter: $hamburger-hover-filter !default;\n\n// Types (Remove or comment out what you donâ€™t need)\n// ==================================================\n$hamburger-types: (minus) !default;\n\n// Base Hamburger (We need this)\n// ==================================================\n@import \"base\";\n\n// Hamburger types\n// ==================================================\n@import \"types/minus\";\n\n// ==================================================\n// Cooking up additional types:\n//\n// The Sass for each hamburger type should be nested\n// inside an @if directive to check whether or not\n// it exists in $hamburger-types so only the CSS for\n// included types are generated.\n//\n// e.g. hamburgers/types/_new-type.scss\n//\n// @if index($hamburger-types, new-type) {\n//   .hamburger--new-type {\n//     ...\n//   }\n// }\n","// Hamburger\n// ==================================================\n.hamburger {\n    padding: $hamburger-padding-y $hamburger-padding-x;\n    // display: inline-block;\n    cursor: pointer;\n\n    transition-property: opacity, filter;\n    transition-duration: 0.15s;\n    transition-timing-function: linear;\n\n    // Normalize (<button>)\n    font: inherit;\n    color: inherit;\n    text-transform: none;\n    background-color: transparent;\n    border: 0;\n    margin: 0;\n    overflow: visible;\n\n    &:hover {\n        @if $hamburger-hover-use-filter == true {\n            filter: $hamburger-hover-filter;\n        } @else {\n            opacity: $hamburger-hover-opacity;\n        }\n    }\n\n    &.is-active {\n        &:hover {\n            @if $hamburger-hover-use-filter == true {\n                filter: $hamburger-active-hover-filter;\n            } @else {\n                opacity: $hamburger-active-hover-opacity;\n            }\n        }\n\n        .hamburger-inner,\n        .hamburger-inner::before,\n        .hamburger-inner::after {\n            background-color: $hamburger-active-layer-color;\n        }\n    }\n}\n\n.hamburger-box {\n    width: $hamburger-layer-width;\n    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;\n    display: inline-block;\n    position: relative;\n}\n\n.hamburger-inner {\n    display: block;\n    top: 50%;\n    margin-top: $hamburger-layer-height / -2;\n\n    &,\n    &::before,\n    &::after {\n        width: $hamburger-layer-width;\n        height: $hamburger-layer-height;\n        background-color: $hamburger-layer-color;\n        border-radius: $hamburger-layer-border-radius;\n        position: absolute;\n        transition-property: transform;\n        transition-duration: 0.15s;\n        transition-timing-function: ease;\n    }\n\n    &::before,\n    &::after {\n        content: \"\";\n        display: block;\n    }\n\n    &::before {\n        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;\n    }\n\n    &::after {\n        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;\n    }\n}\n","@if index($hamburger-types, minus) {\n  /*\n   * Minus\n   */\n  .hamburger--minus {\n    .hamburger-inner {\n      &::before,\n      &::after {\n        transition: bottom 0.08s 0s ease-out,\n                    top 0.08s 0s ease-out,\n                    opacity 0s linear;\n      }\n    }\n\n    &.is-active {\n      .hamburger-inner {\n        &::before,\n        &::after {\n          opacity: 0;\n          transition: bottom 0.08s ease-out,\n                      top 0.08s ease-out,\n                      opacity 0s 0.08s linear;\n        }\n        &::before {\n          top: 0;\n        }\n\n        &::after {\n          bottom: 0;\n        }\n      }\n    }\n  }\n}\n"]}